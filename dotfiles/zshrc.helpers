function source_if_exists() {
    if [ -f "$@" ]; then
        source "$@"
    fi
}

# Tags
function create_python_tags_here {
    if [ ! -z "$VIRTUAL_ENV" ]; then
        ctags -R --languages=python --fields=+l --python-kinds=-iv . $VIRTUAL_ENV/lib/*
    else
        ctags -R --languages=python --fields=+l --python-kinds=-iv .
    fi
}

# Git
function gpush() {
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    echo "Checking ${current_branch}..."
    for main_branch in master prod main; do
        if [ "${current_branch}" = "$main_branch" ]; then
            echo "On $main_branch branch, not pushing!"
            return
        fi
    done

    git push -u origin ${current_branch}
}

function find_master_branch {
    branch=main

    if [ $(git rev-parse --verify --quiet prod) ]; then
        branch=prod
    fi

    if [ $(git rev-parse --verify --quiet master) ]; then
        branch=master
    fi

    if [ $(git rev-parse --verify --quiet preprod) ]; then
        branch=preprod
    fi

    echo ${branch}
}

if alias gsw >/dev/null 2>&1; then
    unalias gsw
fi
function gsw() {
    git switch "$(git branch -lr | fzf | tr -d '[:space:]\*')"
}

function btm() {
    branch=$(find_master_branch)

    echo "Switching back to ${branch}..."

    git switch $branch && \
        git fetch origin && \
        git merge origin $branch && \
        git-clean-branches
}

function git-clean-branches {
    for branch in $(git branch --merged | grep -v master | grep -v '^\*'); do
        git branch -d $branch
    done
}

function fbr() {
    local branches branch
    branches=$(git branch --all | grep -v HEAD) &&
        branch=$(echo "$branches" |
        fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
        git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

function gitclean {
    files=$(git clean -n)
    if [ -z "$files" ]; then
        echo "Already shiny!"
        return
    fi
    echo $files
    echo -n "Continue? (y/n) "
    read answer
    if [ "$answer" = "y" ]; then
        echo "Cleaning..."
        git clean -f
    fi
}

function gnbs() {
    echo "== Stashing changes =="
    git stash
    echo "== Switching back to master/prod =="
    btm

    gnb $@

    echo "== Restoring changes =="
    git stash pop
}

function gnb() {
    new_branch=$1
    if [ -z "${new_branch}" ]; then
        echo "Missing new branch name."
        return
    fi

    echo "== Creating new branch =="
    git switch -c chris.linstid/${new_branch}
}

function gpom() {
    master_branch=$(find_master_branch)
    git pull origin ${master_branch} --no-edit
}

function gprom() {
    master_branch=$(find_master_branch)
    git pull origin --rebase ${master_branch} --no-edit
}

# Command to switch to source directories under ~/src
function src {
    cd ~/src/$1
}
compctl -W ~/src -/ src

alias stocks='docker run -it --rm -e TZ=America/New_York -v ~/.ticker.yaml:/.ticker.yaml achannarasappa/ticker'

function vault-switch {
    export VAULT_ADDR="https://vault.$1"
    vault token lookup 2>&1 > /dev/null || vault login -method=oidc -no-print && echo "Switched to $VAULT_ADDR"
}

function update-rapid-from-source {
    TARGET_BIN=~/.local/bin
    mkdir -p $TARGET_BIN
    pushd ~/dd/dd-source
    bzl build //domains/api_platform/rapid/apps/rapid:rapid
    cp -v bazel-bin/domains/api_platform/rapid/apps/rapid/rapid_/rapid $TARGET_BIN
    chmod 755 $TARGET_BIN/rapid
    popd
}

function update-tdctl-from-source {
    TARGET_BIN=~/.local/bin
    mkdir -p $TARGET_BIN
    pushd ~/dd/dd-source
    bzl build //domains/api_platform/apps/tdctl:tdctl
    cp -v bazel-bin/domains/api_platform/apps/tdctl/tdctl_/tdctl $TARGET_BIN
    chmod 755 $TARGET_BIN/tdctl
    popd
}

alias rapidctl="pushd ~/dd/dd-source && bzl run //domains/api_platform/apps/rapidctl --; popd"

function generate-build-file() {
    domain=$1
    service=$2
    manifest="//domains/${domain}/apps/apis/${service}:rapidschema_manifest"
    echo "Manifest is $manifest"
    bzl run //domains/api_platform/rapid/etc/delta_workflow_gen \
        --//domains/api_platform/rapid/etc/delta_workflow_gen:rapidschema_manifest="${manifest}"
}

function orgstore-psql {
    LOGICAL_NAME=$1
    K8S_CLUSTER=$2

    kubectl exec \
        --context $K8S_CLUSTER \
        --namespace orgstore-$LOGICAL_NAME \
        -it \
        deployment/orgstore-$LOGICAL_NAME-toolbox -- pg-wrap -o $LOGICAL_NAME psql
}

alias rapid-bzl="pushd ~/dd/dd-source && bzl run //domains/api_platform/rapid/apps/rapid:rapid"
alias bzl-test-rapid-cli="pushd ~/dd/dd-source && bzl test //domains/api_platform/rapid/apps/rapid/...; popd"

function rapid-bin {
    pushd $DATADOG_ROOT/dd-source
    bzl build //domains/api_platform/rapid/apps/rapid:rapid || return
    popd

    RAPID2_BZL=True $DATADOG_ROOT/dd-source/bazel-bin/domains/api_platform/rapid/apps/rapid/rapid_/rapid $@
}

